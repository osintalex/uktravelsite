import textwrap
import os
import logging

from .models import Country
import country_converter as coco
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.offline import plot

logger = logging.getLogger(__name__)


def convert_country_names():
    """
    Turns country names from the government's API into ISO codes for graphing in plotly.
    :return: dictionary containing dataframes for the outbound graph and another for the inbound graph.
    """
    dataframes = {}

    inbound_file_path = os.getcwd() + "/corona/data/inbound-graph-data.csv"

    outbound = Country.objects.filter(
        date_of_information=pd.Timestamp("today").strftime("%Y-%m-%d")
    ).values()
    outbound = list(outbound)
    outbound = pd.DataFrame(
        {
            "Country": [x["name"] for x in outbound],
            "Coronavirus Information": [x["corona"] for x in outbound],
            "Quarantine Information": [x["quarantine"] for x in outbound],
            "Travel Sentiment Score": [x["sentiment"] for x in outbound],
        }
    )

    for counter, item in enumerate([outbound, inbound_file_path]):

        if counter == 0:
            df = outbound
        elif counter == 1:
            df = pd.read_csv(item)

        df["Country"] = df["Country"].str.lower()
        orig_countries = df["Country"].to_list()
        orig_countries = [str(x).strip() for x in orig_countries]
        orig_countries = [x.replace(" ", "-") for x in orig_countries]

        iso_countries = coco.convert(names=orig_countries, src="regex", to="ISO3")

        # Some of the UK gov countries aren't converted by this
        # So the below manually replaces them in case they are in the dataframe

        for count, x in enumerate(orig_countries):
            try:
                if x == "british-antarctic-territory":
                    bat = count
                    iso_countries[bat] = "ATA"
                if x == "cape-verde":
                    cv = count
                    iso_countries[cv] = "CPV"
                if x == "cook-islands-tokelau-and-niue":
                    cook = count
                    iso_countries[cook] = "COK"
                if x == "st-martin-and-st-barthelemy":
                    stm = count
                    iso_countries[stm] = "MF"
                if x == "madeira":
                    stm = count
                    iso_countries[stm] = "PT-20"
                if x == "the-azores":
                    stm = count
                    iso_countries[stm] = "PT-30"
            except Exception as e:
                logger.error(e)

        df["Iso Country"] = iso_countries
        df = df[~df["Iso Country"].str.contains("not found")]

        if counter == 0:
            dataframes["outbound"] = df
        elif counter == 1:
            dataframes["inbound"] = df

    return dataframes


def clean_text(x):
    """
    Clean up dataframe text so it looks good on hover
    :param x: string, dataframe row item
    :return: string, cleaned up row item
    """

    x = x.replace("\n", "")
    x = x.replace("  ", " ")
    x = x.replace("-", " ")
    x = x.replace("MISSING DATA", "None available")
    x = x[:200] + "..."
    if x == "":
        x = "None available"

    return x


def make_outbound_graph(df):
    """
    Creates a graph for the outbound page.
    :param df: pandas dataframe generated by the convert country codes function above
    :return: plotly div object generated by plotly offline
    """

    # Tidy up data

    df.dropna(inplace=True)
    df["Country"] = df["Country"].str.title()
    df["Coronavirus Information"] = df["Coronavirus Information"].apply(clean_text)
    df["Quarantine Information"] = df["Quarantine Information"].apply(clean_text)
    df["Coronavirus Information"] = df["Coronavirus Information"].apply(
        lambda x: "<br>".join(textwrap.wrap(x))
    )
    df["Quarantine Information"] = df["Quarantine Information"].apply(
        lambda x: "<br>".join(textwrap.wrap(x))
    )

    # Make graph

    fig = px.choropleth(
        df,
        locations="Iso Country",
        color="Travel Sentiment Score",
        hover_data=["Country", "Coronavirus Information", "Quarantine Information"],
        color_continuous_scale=px.colors.sequential.Peach_r,
        title="Coronavirus Information when Travelling from the UK",
    )

    # Make graph pretty

    tickvals = df["Travel Sentiment Score"].max()
    tickvals = [tickvals * 0.4, tickvals * 0.6, tickvals * 0.8, tickvals * 0.95]
    fig.update_layout(
        coloraxis_colorbar=dict(
            title="Can I go there?",
            tickvals=tickvals,
            ticktext=[
                "Terrible Idea",
                "Probably not",
                "Maybe if you're lucky",
                "Yes but double check",
            ],
        )
    )
    fig.update_layout(
        hoverlabel=dict(bgcolor="white", font_size=12, font_family="Edelsans")
    )
    fig.update_layout(
        autosize=True,
        height=500,
        margin=dict(l=0, r=0, b=0, t=0, pad=0),
        paper_bgcolor="rgb(245,245,245)",
    )

    fig.update_traces(
        go.Choropleth(
            hovertemplate="Country: %{customdata[0]} <br>Travel Info:%{customdata[1]} <br>Quarantine Info:%{customdata[2]}"
        )
    )

    fig["layout"]["titlefont"] = {"family": "Edelsans", "size": 14}
    fig.layout.font.family = "Edelsans"

    plot_div = plot(fig, output_type="div", config={"displayModeBar": False})

    return plot_div


def make_inbound_graph(df):
    """
    Creates a graph for the inbound page.
    :param df: pandas dataframe generated by the convert country codes function above
    :return: plotly div object generated by plotly offline
    """

    df["Country"] = df["Country"].str.capitalize()
    df["Score"] = 1

    # Make graph

    fig = px.choropleth(
        df,
        locations="Iso Country",
        hover_data=["Country"],
        color="Score",
        color_continuous_scale=px.colors.sequential.Greens,
        title="If you travel to these countries, you DO NOT have to quarantine when returning to the UK. For all other countries, you do!",
    )

    # Make graph pretty

    fig.update_layout(
        hoverlabel=dict(bgcolor="white", font_size=12, font_family="Edelsans")
    )
    fig.update_layout(coloraxis_showscale=False)
    fig.update_traces(go.Choropleth(hovertemplate="%{customdata[0]}"))
    fig.update_layout(
        autosize=True,
        height=500,
        margin=dict(l=0, r=0, b=0, t=0, pad=0),
        paper_bgcolor="rgb(245,245,245)",
    )

    fig["layout"]["titlefont"] = {"family": "Edelsans", "size": 14}
    fig.layout.font.family = "Edelsans"

    plot_div = plot(fig, output_type="div", config={"displayModeBar": False})

    return plot_div


def plot_outbound():
    """
    Plots outbound graph, called in views.py
    :return: plotly offline div object
    """

    outbound_df = convert_country_names()["outbound"]
    plot_div = make_outbound_graph(outbound_df)

    return plot_div


def plot_inbound():
    """
    Plots inbound graph, called in views.py
    :return: plotly offline div object
    """

    inbound_df = convert_country_names()["inbound"]
    plot_div = make_inbound_graph(inbound_df)

    return plot_div
